{"version":3,"sources":["./src/app/activity/activity.component.html","./src/app/activity/activity-routing.component.ts","./src/app/activity/activity-routing.module.ts","./src/app/activity/activity.component.scss","./src/app/activity/activity.component.ts","./src/app/activity/activity.module.ts","./src/app/activity/activity.service.ts"],"names":[],"mappings":"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","file":"default~assessment-assessment-module~events-events-module~reviews-reviews-module~tasks-tasks-module~~277a831e.js","sourcesContent":["export default \"<ion-header mode=\\\"ios\\\">\\n  <ion-toolbar [ngClass]=\\\"{'ion-toolbar-absolute': !utils.isMobile()}\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"back()\\\">\\n        <ion-icon class=\\\"icon-backward ion-margin-start\\\" name=\\\"arrow-back\\\" color=\\\"primary\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-center\\\">Activity</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding ion-text-center\\\" color=\\\"light\\\" [ngClass]=\\\"{\\n  'ion-content-absolute': !utils.isMobile(),\\n  'ion-content-mobile': utils.isMobile()\\n}\\\">\\n\\n  <ng-container *ngIf=\\\"loadingActivity\\\">\\n    <p><ion-skeleton-text animated style=\\\"width: 40%; margin-left: 30%; height: 20px\\\"></ion-skeleton-text></p>\\n    <p><ion-skeleton-text animated style=\\\"width: 80%\\\"></ion-skeleton-text></p>\\n    <div class=\\\"ion-text-left ion-margin-top\\\">\\n      <ion-label color=\\\"medium\\\" class=\\\"subtitle-2 gray-2\\\">Tasks</ion-label>\\n    </div>\\n    <ion-card class=\\\"practera-card\\\">\\n      <ion-list>\\n        <app-list-item loading=\\\"true\\\"></app-list-item>\\n        <app-list-item loading=\\\"true\\\" lines=\\\"none\\\"></app-list-item>\\n      </ion-list>\\n    </ion-card>\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"!loadingActivity\\\">\\n    <h1 class=\\\"headline-4\\\">{{ activity.name }}</h1>\\n    <div class=\\\"ion-text-left\\\">\\n      <app-description *ngIf=\\\"activity.description\\\" [content]=\\\"activity.description\\\" class=\\\"body-1\\\"></app-description>\\n    </div>\\n    <div class=\\\"ion-text-left ion-margin-top\\\">\\n      <ion-label color=\\\"medium\\\" class=\\\"subtitle-2 gray-2\\\">Tasks</ion-label>\\n      <ion-button style=\\\"display: none;\\\" (click)=\\\"getNextTask()\\\">Get Next</ion-button>\\n    </div>\\n\\n    <ion-card class=\\\"practera-card\\\" id=\\\"tasks-card\\\">\\n      <ion-list>\\n        <app-list-item\\n          *ngFor=\\\"let task of activity.tasks; let i = index\\\"\\n          [leadingIcon]=\\\"taskLeadingIcon(task)\\\"\\n          [leadingIconPulsing]=\\\"assessmentNotSubmitted(task) && task.isDueToday\\\"\\n          [title]=\\\"task.name\\\"\\n          [subtitle1]=\\\"assessmentNotSubmitted(task) ? sharedService.dueDateFormatter(task.dueDate) : ''\\\"\\n          [subtitle1Color]=\\\"task.isOverdue ? 'danger' : ''\\\"\\n          [subtitle2]=\\\"taskSubtitle2(task)\\\"\\n          [endingIcon]=\\\"taskEndingIcon(task)\\\"\\n          [active]=\\\"currentTask && currentTask.type == task.type && currentTask.id == task.id\\\"\\n          [lines]=\\\"i == activity.tasks.length - 1 ? 'none' : ''\\\"\\n          (click)=\\\"goto(task)\\\"\\n        ></app-list-item>\\n      </ion-list>\\n    </ion-card>\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"loadingEvents\\\">\\n    <ion-spinner></ion-spinner>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"events && events.length > 0\\\">\\n    <div class=\\\"ion-text-left ion-margin-top\\\">\\n      <ion-label class=\\\"subtitle-2 gray-2\\\">Events</ion-label>\\n    </div>\\n    <ion-card class=\\\"practera-card\\\" id=\\\"events-card\\\">\\n      <ion-list>\\n        <ng-container *ngFor=\\\"let event of events; let i = index\\\">\\n          <app-list-item\\n            *ngIf=\\\"i < 2\\\"\\n            leadingIcon=\\\"calendar-outline\\\"\\n            [leadingIconColor]=\\\"eventListService.isNotActionable(event) ? 'medium' : 'primary'\\\"\\n            [title]=\\\"event.name\\\"\\n            [titleColor]=\\\"eventListService.isNotActionable(event) ? 'gray-2' : ''\\\"\\n            [subtitle1]=\\\"event.activityName\\\"\\n            [subtitle2]=\\\"eventListService.timeDisplayed(event)\\\"\\n            [endingIcon]=\\\"!eventListService.isNotActionable(event) ? 'arrow-forward' : ''\\\"\\n            [eventExpired]=\\\"event.isPast && !event.isBooked\\\"\\n            [lines]=\\\"i == events.length - 1 ? 'none' : ''\\\"\\n            (click)=\\\"gotoEvent(event)\\\"\\n          ></app-list-item>\\n        </ng-container>\\n        <clickable-item\\n          *ngIf=\\\"events.length > 2\\\"\\n          lines=\\\"none\\\"\\n          (click)=\\\"gotoEvent()\\\">\\n          <ion-icon name=\\\"ellipsis-vertical\\\" color=\\\"primary\\\" class=\\\"ion-margin-end\\\"></ion-icon>\\n          <p>Show More</p>\\n        </clickable-item>\\n      </ion-list>\\n    </ion-card>\\n  </ng-container>\\n</ion-content>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  template: '<ion-router-outlet></ion-router-outlet>'\n})\nexport class ActivityRoutingComponent {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ActivityComponent } from './activity.component';\nimport { ActivityRoutingComponent } from './activity-routing.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ActivityRoutingComponent,\n    children: [\n      {\n        path: ':id',\n        component: ActivityComponent,\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ActivityRoutingModule {}\n","export default \".icon-check {\\n  font-size: 30px;\\n}\\n\\n.icon-backward, .icon-forward {\\n  font-size: 20px !important;\\n}\\n\\n.task-leading-icon {\\n  margin-right: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaGF3L1dvcmtzcGFjZXMvd3d3L2ludGVyc2VjdGl2ZS9wcmFjdGVyYS1hcHAtdjIvc3JjL2FwcC9hY3Rpdml0eS9hY3Rpdml0eS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYWN0aXZpdHkvYWN0aXZpdHkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDRSxlQUFBO0FDQUY7O0FERUE7RUFDRSwwQkFBQTtBQ0NGOztBRENBO0VBQ0Usa0JBQUE7QUNFRiIsImZpbGUiOiJzcmMvYXBwL2FjdGl2aXR5L2FjdGl2aXR5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uaWNvbi1jaGVjayB7XG4gIGZvbnQtc2l6ZTogMzBweDtcbn1cbi5pY29uLWJhY2t3YXJkLCAuaWNvbi1mb3J3YXJkIHtcbiAgZm9udC1zaXplOiAyMHB4ICFpbXBvcnRhbnQ7XG59XG4udGFzay1sZWFkaW5nLWljb24ge1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG59XG4iLCIuaWNvbi1jaGVjayB7XG4gIGZvbnQtc2l6ZTogMzBweDtcbn1cblxuLmljb24tYmFja3dhcmQsIC5pY29uLWZvcndhcmQge1xuICBmb250LXNpemU6IDIwcHggIWltcG9ydGFudDtcbn1cblxuLnRhc2stbGVhZGluZy1pY29uIHtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xufSJdfQ== */\"","import { Component, Input, NgZone, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of, forkJoin, Subscription } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ActivityService, Activity, Task } from './activity.service';\nimport { UtilsService } from '../services/utils.service';\nimport { NotificationService } from '@shared/notification/notification.service';\nimport { BrowserStorageService } from '@services/storage.service';\nimport { Event, EventListService } from '@app/event-list/event-list.service';\nimport { SharedService } from '@services/shared.service';\nimport { FastFeedbackService } from '../fast-feedback/fast-feedback.service';\nimport { NewRelicService } from '@shared/new-relic/new-relic.service';\n\n@Component({\n  selector: 'app-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['./activity.component.scss']\n})\nexport class ActivityComponent {\n  @Input() id: number;\n  @Input() currentTask;\n  @Output() navigate = new EventEmitter();\n  // when tasks are ready, emit tasks to the parent component so that the parent component can decide which task to display\n  @Output() tasksReady = new EventEmitter();\n  getActivity: Subscription;\n  getEventPusher: Subscription;\n  getEvents: Subscription;\n  activity: Activity = {\n    id: 0,\n    name: '',\n    description: '',\n    tasks: []\n  };\n  loadingActivity = true;\n  events: Array<Event>;\n  loadingEvents = true;\n\n  constructor(\n    public router: Router,\n    private activityService: ActivityService,\n    public utils: UtilsService,\n    private notificationService: NotificationService,\n    public storage: BrowserStorageService,\n    public eventListService: EventListService,\n    public sharedService: SharedService,\n    public fastFeedbackService: FastFeedbackService,\n    private newRelic: NewRelicService,\n    private ngZone: NgZone\n  ) {\n\n    // update event list after book/cancel an event\n    this.getEventPusher = this.utils.getEvent('update-event').subscribe(\n      event => {\n        this._getEvents();\n      },\n      (error) => {\n        this.newRelic.noticeError(error);\n      }\n    );\n  }\n\n  // force every navigation happen under radar of angular\n  private _navigate(direction) {\n    if (this.utils.isMobile()) {\n      // redirect to topic/assessment page for mobile\n      return this.ngZone.run(() => {\n        return this.router.navigate(direction);\n      });\n    } else {\n      // emit event to parent component(task component)\n      switch (direction[0]) {\n        case 'topic':\n          this.navigate.emit({\n            type: 'topic',\n            topicId: direction[2]\n          });\n          break;\n        case 'assessment':\n          this.navigate.emit({\n            type: 'assessment',\n            contextId: direction[3],\n            assessmentId: direction[4]\n          });\n          break;\n        default:\n          return this.ngZone.run(() => {\n            return this.router.navigate(direction);\n          });\n      }\n    }\n  }\n\n  onEnter() {\n    this.newRelic.setPageViewName('activity components');\n    this.activity = {\n      id: 0,\n      name: '',\n      description: '',\n      tasks: []\n    };\n    this.loadingActivity = true;\n    this._getActivity();\n    this._getEvents();\n    this.fastFeedbackService.pullFastFeedback().subscribe();\n  }\n\n  private _getActivity() {\n    this.getActivity = this.activityService.getActivity(this.id)\n      .subscribe(\n        activity => {\n          if (!activity) {\n            // activity is null by default\n            return ;\n          }\n          this.activity = activity;\n          this.loadingActivity = false;\n          this.newRelic.setPageViewName(`Activity ${this.activity.name}, ID: ${this.id}`);\n          this.tasksReady.emit(activity.tasks);\n        },\n        (error) => {\n          this.newRelic.noticeError(error);\n        }\n      );\n  }\n\n  private _getEvents(events?: Event[]) {\n    this.events = events || [];\n    if (events === undefined) {\n      this.loadingEvents = true;\n      this.getEvents = this.eventListService.getEvents(this.id).subscribe(\n        res => {\n          this.events = res;\n          this.loadingEvents = false;\n        },\n        error => {\n          this.newRelic.noticeError(error);\n        }\n      );\n    }\n  }\n\n  back() {\n    this._navigate([ 'app', 'home' ]);\n    this.newRelic.actionText('Back button pressed on Activities Page.');\n  }\n\n  goto(task) {\n    this.newRelic.actionText(`Selected Task (${task.type}): ID ${task.id}`);\n\n    switch (task.type) {\n      case 'Assessment':\n        if (task.isForTeam && !this.storage.getUser().teamId) {\n          this.notificationService.popUp('shortMessage', {message: 'To do this assessment, you have to be in a team.'});\n          break;\n        }\n        // check if assessment is locked by other team members\n        if (task.isLocked) {\n          this.notificationService.lockTeamAssessmentPopUp(\n            {\n              name: task.submitter.name,\n              image: task.submitter.image\n            },\n            data => {\n              if (data.data) {\n                this._navigate(['assessment', 'assessment', this.id , task.contextId, task.id]);\n              }\n            }\n          );\n          return ;\n        }\n        this._navigate(['assessment', 'assessment', this.id , task.contextId, task.id]);\n        break;\n      case 'Topic':\n        this._navigate(['topic', this.id, task.id]);\n        break;\n      case 'Locked':\n        this.notificationService.popUp('shortMessage', {message: 'This part of the app is still locked. You can unlock the features by engaging with the app and completing all tasks.'});\n        break;\n    }\n  }\n\n  gotoEvent(event?) {\n    // go to the event page without choosing any event\n    if (!event) {\n      return this.router.navigate(['app', 'events', {activity_id: this.id}]);\n    }\n    // display the event pop up for mobile\n    if (this.utils.isMobile()) {\n      return this.eventListService.eventDetailPopUp(event);\n    }\n    // go to the event page with an event selected\n    return this.router.navigate(['app', 'events', {activity_id: this.id, event_id: event.id}]);\n  }\n\n  /**\n   * Manually change the status of a task\n   * @param type   The type of the task('Assessment', 'Topic')\n   * @param id     The id of the task\n   * @param status The status\n   */\n  changeTaskStatus(type: string, id: number, status: string) {\n    const index = this.activity.tasks.findIndex(t => t.id === +id && t.type === type);\n    if (index < 0) {\n      return;\n    }\n    this.activity.tasks[index].status = status;\n  }\n\n  /******************\n    Used for task layout\n  ******************/\n  taskLeadingIcon(task) {\n    switch (task.type) {\n      case 'Locked':\n        return 'lock-closed-outline';\n      case 'Topic':\n        return 'reader-outline';\n      case 'Assessment':\n        return 'clipboard-outline';\n    }\n  }\n\n  assessmentNotSubmitted(task) {\n    return task.type === 'Assessment' && (!task.status || task.status === '' || task.status === 'in progress');\n  }\n\n  taskSubtitle2(task) {\n    if (task.type === 'Locked') {\n      return '';\n    }\n    let title = task.type + ' ';\n    title += task.isLocked ? '- Locked by ' + task.submitter.name : task.status;\n    return title;\n  }\n\n  taskEndingIcon(task) {\n    if (task.isLocked) {\n      return 'lock-closed-outline';\n    }\n    switch (task.status) {\n      case 'done':\n        return 'checkmark';\n      case 'pending review':\n        return 'hourglass-outline';\n      case 'feedback available':\n      case 'in progress':\n      default:\n        return 'arrow-forward';\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '@shared/shared.module';\nimport { ActivityRoutingModule } from './activity-routing.module';\nimport { ActivityRoutingComponent } from './activity-routing.component';\nimport { ActivityComponent } from './activity.component';\nimport { ActivityService } from './activity.service';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ActivityRoutingModule\n  ],\n  declarations: [\n    ActivityRoutingComponent,\n    ActivityComponent\n  ],\n  providers: [\n    ActivityService\n  ],\n  exports: [\n    ActivityComponent\n  ]\n})\nexport class ActivityModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RequestService } from '@shared/request/request.service';\nimport { UtilsService } from '@services/utils.service';\nimport { BrowserStorageService } from '@services/storage.service';\nimport { NotificationService } from '@shared/notification/notification.service';\nimport { Router } from '@angular/router';\n\n/**\n * @name api\n * @description list of api endpoint involved in this service\n * @type {Object}\n */\nconst api = {\n  activity: 'api/activities.json',\n  submissions: 'api/submissions.json',\n  progress: 'api/v2/motivations/progress/list.json',\n  nextTask: 'api/v2/plans/activity/next_task'\n};\n\nexport interface Activity {\n  id: number;\n  name: string;\n  description?: string;\n  tasks: Array<Task>;\n}\n\nexport interface Task {\n  id: number;\n  type: string;\n  name: string;\n  status?: string;\n  contextId?: number;\n  isForTeam?: boolean;\n  dueDate?: string;\n  isOverdue?: boolean;\n  isDueToday?: boolean;\n  isLocked?: boolean;\n  submitter?: {\n    name: string;\n    image: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ActivityService {\n  public tasks: Array<any>;\n\n  constructor(\n    private request: RequestService,\n    private utils: UtilsService,\n    public storage: BrowserStorageService,\n    private router: Router,\n    private notification: NotificationService\n  ) {}\n\n  // request for the latest data, and return the previously saved data at the same time\n  public getActivity(id) {\n    this._getActivityData(id).subscribe(res => this.utils.updateActivityCache(id, res));\n    return this.utils.getActivityCache(id);\n  }\n\n  // request for the latest project data\n  private _getActivityData(id) {\n    return this.request.postGraphQL(\n      `\"{` +\n        `activity(id:${id}){` +\n          `id name description tasks{` +\n            `id name type is_locked is_team deadline context_id status{` +\n              `status is_locked submitter_name submitter_image` +\n            `}` +\n          `}` +\n        `}` +\n      `}\"`)\n      .pipe(map(res => this._normaliseActivity(res.data)));\n  }\n\n  private _normaliseActivity(data): Activity {\n    data.activity.tasks = data.activity.tasks.map(task => {\n      if (task.is_locked) {\n        return {\n          id: 0,\n          type: 'Locked',\n          name: 'Locked'\n        };\n      }\n      switch (task.type) {\n        case 'topic':\n          return {\n            id: task.id,\n            name: task.name,\n            type: 'Topic',\n            status: task.status.status\n          };\n\n        case 'assessment':\n          return {\n            id: task.id,\n            name: task.name,\n            type: 'Assessment',\n            contextId: task.context_id,\n            isForTeam: task.is_team,\n            dueDate: task.deadline,\n            isOverdue: task.deadline ? this.utils.timeComparer(task.deadline) < 0 : false,\n            isDueToday: task.deadline ? this.utils.timeComparer(task.deadline, { compareDate: true }) === 0 : false,\n            status: task.status.status === 'pending approval' ? 'pending review' : task.status.status,\n            isLocked: task.status.is_locked,\n            submitter: {\n              name: task.status.submitter_name,\n              image: task.status.submitter_image\n            }\n          };\n        default:\n          console.warn(`Unsupported model type ${task.type}`);\n          return {\n            id: task.id,\n            name: task.name,\n            type: task.type\n          };\n      }\n    });\n    return data.activity;\n  }\n\n  /**\n   * Go to the next task within the same activity, or go back to former layer\n   * Logic:\n   *  - If current task is not the last task in the activity, go to the next task\n   *  - If current task is the last task in the activity and there's no unfinished task before the current task, go to the home page\n   *  - If current task is the last task in the activity and there is unfinished task before the current task, show a pop up for user to choose whether go to the activity page or home page\n   *\n   * @param activityId Activity id\n   * @param taskType   Current task type ('assessment'/'topic')\n   * @param taskId     Current task id\n   * @param justFinished Whether the current task is just finished or not\n   */\n  async gotoNextTask(activityId: number, taskType: string, taskId: number, justFinished = true): Promise<string[]> {\n    const res = await this.getNextTask(activityId, taskType, taskId).toPromise();\n    // go to next task\n    if (!res.isLast) {\n      // go to the next task\n      let route = ['app', 'home'];\n      switch (res.task.type) {\n        case 'assessment':\n          route = ['assessment', 'assessment', activityId.toString(), res.task.contextId.toString(), res.task.id.toString()];\n          break;\n\n        case 'topic':\n          route = ['topic', activityId.toString(), res.task.id.toString()];\n          break;\n      }\n      return route;\n    }\n    if (res.task) {\n      // pop up activity completed modal\n      this.notification.activityCompletePopUp(activityId, justFinished);\n      return ;\n    }\n    // go back to home page, and scroll to the activity\n    if (justFinished) {\n      // and display the toast\n      this.router.navigate(['app', 'home'], { queryParams: { activityId: activityId, activityCompleted: true } });\n    } else {\n      // and don't display the toast\n      this.router.navigate(['app', 'home'], { queryParams: { activityId: activityId } });\n    }\n  }\n\n  /**\n   * Get the data needed to find next task\n   * @param activityId      The id of current activity\n   * @param currentTaskType The type of current task\n   * @param currentTaskId   The id of current task\n   */\n  getNextTask(activityId: number, currentTaskType: string, currentTaskId: number): Observable <{ isLast: boolean; task: Task; }> {\n    return this.request.get(api.nextTask, {\n        params: {\n          activity_id: activityId,\n          task_type: currentTaskType.toLowerCase(),\n          task_id: currentTaskId\n        }\n      }).pipe(map(res => {\n        return {\n          isLast: res.data.is_last,\n          task: !this.utils.isEmpty(res.data.task) ? {\n            id: res.data.task.id,\n            name: res.data.task.name,\n            type: res.data.task.type,\n            contextId: res.data.task.context_id || null\n          } : null\n        };\n      })\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}